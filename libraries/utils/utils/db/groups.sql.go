// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: groups.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
    name,
    image,
    description,
    location
) VALUES (
    $1, -- name
    $2, -- image (nullable)
    $3, -- description (nullable)
    -- Convert lat/lon to PostGIS Point with SRID 4326 (WGS84)
    ST_SetSRID(ST_MakePoint($4::float, $5::float), 4326)
)
RETURNING 
    id,
    name,
    image,
    description,
    -- Extract coordinates for convenience
    ST_X(location) AS longitude,
    ST_Y(location) AS latitude,
    created_at,
    updated_at
`

type CreateGroupParams struct {
	Name        string      `json:"name"`
	Image       pgtype.Text `json:"image"`
	Description pgtype.Text `json:"description"`
	Longitude   float64     `json:"longitude"`
	Latitude    float64     `json:"latitude"`
}

type CreateGroupRow struct {
	ID          int32         `json:"id"`
	Name        string        `json:"name"`
	Image       pgtype.Text   `json:"image"`
	Description pgtype.Text   `json:"description"`
	Longitude   pgtype.Float8 `json:"longitude"`
	Latitude    pgtype.Float8 `json:"latitude"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdatedAt   time.Time     `json:"updated_at"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (CreateGroupRow, error) {
	row := q.db.QueryRow(ctx, createGroup,
		arg.Name,
		arg.Image,
		arg.Description,
		arg.Longitude,
		arg.Latitude,
	)
	var i CreateGroupRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Description,
		&i.Longitude,
		&i.Latitude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActivitiesWithinRadius = `-- name: GetActivitiesWithinRadius :many
SELECT DISTINCT
    a.id,
    a.name,
    a.image,
    a.created_at,
    a.updated_at
FROM activities        AS a
JOIN group_activities  AS ga ON ga.activity_id = a.id
JOIN groups            AS g  ON g.id = ga.group_id
WHERE g.location IS NOT NULL
  AND ST_DWithin(
        g.location::geography,
        ST_SetSRID(ST_MakePoint($1, $2), 4326)::geography,
        $3
  )
`

type GetActivitiesWithinRadiusParams struct {
	StMakepoint   float64 `json:"st_makepoint"`
	StMakepoint_2 float64 `json:"st_makepoint_2"`
	StDwithin     float64 `json:"st_dwithin"`
}

// -------------------------------------------------------------
// Fetch all distinct activities that belong to groups found by
// the same radius filter.  Again uses positional params for sqlc.
// -------------------------------------------------------------
func (q *Queries) GetActivitiesWithinRadius(ctx context.Context, arg GetActivitiesWithinRadiusParams) ([]Activity, error) {
	rows, err := q.db.Query(ctx, getActivitiesWithinRadius, arg.StMakepoint, arg.StMakepoint_2, arg.StDwithin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupsWithinRadius = `-- name: GetGroupsWithinRadius :many
SELECT 
    g.id,
    g.name,
    g.image,
    g.description,
    ST_X(g.location) AS longitude,
    ST_Y(g.location) AS latitude,
    g.created_at,
    g.updated_at
FROM groups AS g
WHERE g.location IS NOT NULL
  AND ST_DWithin(
        g.location::geography,
        ST_SetSRID(ST_MakePoint($1, $2), 4326)::geography,
        $3  -- radius in metres
  )
`

type GetGroupsWithinRadiusParams struct {
	StMakepoint   float64 `json:"st_makepoint"`
	StMakepoint_2 float64 `json:"st_makepoint_2"`
	StDwithin     float64 `json:"st_dwithin"`
}

type GetGroupsWithinRadiusRow struct {
	ID          int32         `json:"id"`
	Name        string        `json:"name"`
	Image       pgtype.Text   `json:"image"`
	Description pgtype.Text   `json:"description"`
	Longitude   pgtype.Float8 `json:"longitude"`
	Latitude    pgtype.Float8 `json:"latitude"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdatedAt   time.Time     `json:"updated_at"`
}

// -------------------------------------------------------------
// Get all groups whose home_location is within :radius_meters of
// the supplied point (:longitude, :latitude).  Works with sqlc.
// -------------------------------------------------------------
func (q *Queries) GetGroupsWithinRadius(ctx context.Context, arg GetGroupsWithinRadiusParams) ([]GetGroupsWithinRadiusRow, error) {
	rows, err := q.db.Query(ctx, getGroupsWithinRadius, arg.StMakepoint, arg.StMakepoint_2, arg.StDwithin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGroupsWithinRadiusRow{}
	for rows.Next() {
		var i GetGroupsWithinRadiusRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.Description,
			&i.Longitude,
			&i.Latitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
